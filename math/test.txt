# Define the categories of rings and schemes
let Ring, Scheme : Cat

# Define a contravariant functor from Ring to Scheme
let Spec : Ring ~> Scheme

# Define the property 'affine', which takes as data a scheme X
property affine {
	given X : Scheme
}

# Define property 'qcompact'
property qcompact {
	given X : Scheme
}

# Define a 'theorem' that states that affine schemes are isomorphic to Spec(R) for some ring R
theorem my_thm {
	given X : Scheme
	with affine(X)
	then R : Ring
	then X = Spec(R)
}

# Define a 'theorem' that states that Spec(R) is affine for any ring R
theorem my_thm_2 {
	given R : Ring
	then affine(Spec(R))
}

# Affine implies quasi-compact
theorem aff_imp_qcompact {
	given X : Scheme
	with affine(X)
	then qcompact(X)
}

# Etc.

# 'let x : C' creates objects/morphisms in the context
# 'given x : C' creates data
# 'with P' creates conditions on the data
# 'then P' creates conclusions of statement P
# 'write x = ...' creates symbolic representations, e.g. 'write h = f.g' so that h refers to the composition f.g

# 'assume C' creates a (representationless) object of C
# 'prove C' tries to find or construct an instance of C

# 'ref/use' adds a reference to a book?
