# Define rings, schemes and topological spaces
let Ring, Scheme, Top : Cat

# Define functors
let Spec : Ring -> Scheme
let Global : Scheme -> Ring
assume (Global.Spec) = id(Ring)
assume ((Spec.Global).Spec) = Spec

let top : Scheme -> Top

# Define scheme properties
property affine { let X : Scheme def X = Spec(Global(X)) }

property    qcompact,
            regular,
            noetherian,
            locally_noetherian,
            reduced,
            irreducible,
            cohen_macaulay,
            excellent,
            separated,
            qseparated,
            normal {
                let X : Scheme
}

property integral { let X : Scheme def reduced(X) & irreducible(X) }

# Define morphism properties
property    formally_etale,
            formally_unramified,
            formally_smooth,
            proper,
            finite,
            qfinite,
            flat,
            affine,
            qcompact,
            separated,
            qseparated,
            regular,
            finite_presentation,
            locally_finite_type,
            locally_finite_presentation {
                use X, Y : Scheme let f : X -> Y
}

property etale { use X, Y : Scheme let f : X -> Y def formally_etale(f) & locally_finite_presentation(f) }
property smooth { use X, Y : Scheme let f : X -> Y def formally_smooth(f) & locally_finite_presentation(f) }
property unramified { use X, Y : Scheme let f : X -> Y def formally_unramified(f) & locally_finite_presentation(f) }

property finite_type { use X, Y : Scheme let f : X -> Y def locally_finite_type(f) & qcompact(f) }


# Better to use as definition, or as theorem called 'definition proper'?
# property proper { use X, Y : Scheme let f : X -> Y def separated(f) & universally_closed(f) & finite_type(f) }


# Define topological properties
property connected { let X : Top }
